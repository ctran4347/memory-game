{"version":3,"sources":["assets/logo.svg","layout/Header.js","assets/animal-crossing-loading.gif","components/Villager.js","hooks/ACNH.js","components/VillagerGrid.js","components/ScoreBoard.js","layout/Main.js","utils/randomNumberArray.js","assets/github-icon.svg","layout/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Header","Villager","props","id","url","dependencies","useState","isLoading","setLoading","ACNHData","setACHHData","useEffect","fetch","then","response","json","data","ACNHcall","villagerStyle","color","backgroundColor","className","src","loadingGIF","onClick","e","preventDefault","handleScore","alt","name","style","VillagerGrid","villagerIDs","class","map","ScoreBoard","score","bestScore","Body","level","setLevel","setScore","localStorage","getItem","setBestScore","IDs","setIDs","randomArray","count","min","max","output","length","randomNumber","Math","floor","random","includes","push","randomNumberArray","setItem","Footer","href","target","rel","GithubLogo","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac65cd8d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {React} from \"react\";\nimport logo from \"../assets/logo.svg\"\nexport default function Header (){\n    return (\n    <header>\n      Animal Crossing Memory Game\n    </header>\n    );\n}","export default __webpack_public_path__ + \"static/media/animal-crossing-loading.7404a483.gif\";","import {React} from \"react\";\nimport {ACNHcall} from \"../hooks/ACNH\";\nimport loadingGIF from \"../assets/animal-crossing-loading.gif\";\nfunction Villager(props){\n    const {id} = props;\n    const [isLoading,ACNHData] =  ACNHcall(`https://acnhapi.com/v1/villagers/${id}`,id);\n    const villagerStyle = {\n        color: isLoading?'unset':ACNHData['text-color'],\n        backgroundColor: isLoading?'unset':ACNHData['bubble-color'],\n    }\n    function handleClick(e){\n        e.preventDefault();\n        props.handleScore(ACNHData.id);\n    }\n\n    return(<>\n    {isLoading?\n        <div className=\"villager\">\n            <img className=\"villager-loading-image\" src={loadingGIF}/>\n            <div className=\"villager-loading-text\">Loading</div>\n        </div>\n        :\n        <div className=\"villager\" onClick={handleClick}>\n            <img className=\"villager-image\" alt={ACNHData.name['name-USen']} src={ACNHData['image_uri']}/>\n            <p className=\"villager-name\" style={villagerStyle} >{ACNHData.name['name-USen']}</p>\n            <p className=\"villager-saying\">{ACNHData['saying']}</p>\n        </div>\n        \n    }\n    </>)\n}\nexport default Villager;","import {useEffect, useState } from \"react\";\nexport const ACNHcall = (url,dependencies) =>{\n    const [isLoading,setLoading] = useState(true);\n    const [ACNHData,setACHHData] = useState(null);\n    useEffect( ()=>{\n        setLoading(true);\n       fetch(url)\n       .then((response)=>{\n            return response.json();\n       })\n        .then((data)=>{\n            setACHHData(data);\n            setLoading(false);\n        })\n    },[dependencies]);\n\n    return [isLoading,ACNHData];\n}\n\n","import Villager from \"./Villager\";\nexport default function VillagerGrid(props){\n    const {villagerIDs} = props;\n    return(\n    <div class=\"villager-grid\">\n        {villagerIDs.map((id)=>{\n            return <Villager id={id} handleScore={props.handleScore}/>\n        })}\n    </div>)\n}","\nfunction ScoreBoard(props){\n    return(<div className=\"score-board\">\n            <div className=\"current-score\">\n                Score : {props.score}\n            </div>\n            <div className=\"best-score\">\n                Best Score : {props.bestScore}\n            </div>\n    </div>)\n}\nexport default ScoreBoard;","import {React ,useState} from \"react\";\nimport VillagerGrid from \"../components/VillagerGrid\";\nimport randomNumberArray from \"../utils/randomNumberArray\";\nimport ScoreBoard from \"../components/ScoreBoard\";\nexport default function Body (){\n    const [level,setLevel] = useState(0);\n    const [score,setScore] = useState(0);\n    const [bestScore,setBestScore] = useState(\n                                    localStorage.getItem('best-score')!=null?\n                                    localStorage.getItem('best-score'):0\n                                    );\n    const [IDs,setIDs] = useState([]);\n    const randomArray = randomNumberArray((5*(level+1)),1,391);\n    \n    function handleScore(id){\n        if(IDs.includes(id)){\n            if(score > bestScore){\n                setBestScore(score);\n                localStorage.setItem('best-score',score);\n            }\n            setScore(0);\n            setIDs([]);\n        }\n        else{\n            setScore(score+1);\n            setIDs([...IDs,id]);\n        }\n        setLevel(Math.floor((score/10))%10);\n    }\n    return (\n    <>\n       <ScoreBoard score={score} bestScore={bestScore} />\n       <VillagerGrid villagerIDs = {randomArray} handleScore={handleScore} />\n    </>)\n}","export default function randomNumberArray(count,min,max){\n    const output = [];\n    while(output.length < count){\n        const randomNumber = Math.floor(Math.random() * max ) + min;\n        if(!output.includes(randomNumber)){\n            output.push(randomNumber);   \n        }\n    }\n    return output;\n}","export default __webpack_public_path__ + \"static/media/github-icon.04ed74f3.svg\";","import {React} from \"react\";\nimport GithubLogo from \"../assets/github-icon.svg\";\nexport default function Footer (){\n    return (<footer>\n        Copyright 2021 Â© ctran4347\n        <a href=\"https://github.com/ctran4347\" target=\"_blank\" rel=\"norefererr\"><img className=\"github-logo\" src={GithubLogo}/></a>\n    </footer>)\n}","import './assets/css/App.css';\nimport Header from \"./layout/Header\";\nimport Main from \"./layout/Main\";\nimport Footer from \"./layout/Footer\";\nfunction App() {\n  return (\n    <>\n      <Header/>\n      <Main/>\n      <Footer/> \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}